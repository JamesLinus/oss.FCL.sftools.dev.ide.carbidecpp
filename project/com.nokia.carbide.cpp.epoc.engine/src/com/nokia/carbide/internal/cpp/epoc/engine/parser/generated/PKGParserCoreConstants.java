/*
* Copyright (c) 2009 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of the License "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description: 
*
*/
/* Generated By:JavaCC: Do not edit this line. PKGParserCoreConstants.java */
package com.nokia.carbide.internal.cpp.epoc.engine.parser.generated;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PKGParserCoreConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ASTERISK = 1;
  /** RegularExpression Id. */
  int OPEN_CURLY_BRACE = 2;
  /** RegularExpression Id. */
  int AMPERSAND = 3;
  /** RegularExpression Id. */
  int NOT = 4;
  /** RegularExpression Id. */
  int OPEN_PARENTHESIS = 5;
  /** RegularExpression Id. */
  int CLOSE_PARENTHESIS = 6;
  /** RegularExpression Id. */
  int AND = 7;
  /** RegularExpression Id. */
  int OR = 8;
  /** RegularExpression Id. */
  int WORD = 9;
  /** RegularExpression Id. */
  int INT = 10;
  /** RegularExpression Id. */
  int EQUAL = 11;
  /** RegularExpression Id. */
  int LESS_GREATER = 12;
  /** RegularExpression Id. */
  int LESS = 13;
  /** RegularExpression Id. */
  int GREATER = 14;
  /** RegularExpression Id. */
  int LESS_EQUAL = 15;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 16;
  /** RegularExpression Id. */
  int COND_EXISTS = 17;
  /** RegularExpression Id. */
  int STRING = 18;
  /** RegularExpression Id. */
  int COND_APPROP = 19;
  /** RegularExpression Id. */
  int COMMA = 20;
  /** RegularExpression Id. */
  int COND_PACKAGE = 21;
  /** RegularExpression Id. */
  int IF = 22;
  /** RegularExpression Id. */
  int ELSEIF = 23;
  /** RegularExpression Id. */
  int ELSE = 24;
  /** RegularExpression Id. */
  int ENDIF = 25;
  /** RegularExpression Id. */
  int MINUS = 26;
  /** RegularExpression Id. */
  int PACKAGE_OPTION = 27;
  /** RegularExpression Id. */
  int COMMENT_START = 28;
  /** RegularExpression Id. */
  int LANGUAGE_START = 29;
  /** RegularExpression Id. */
  int PACKAGE_HEADER_START = 30;
  /** RegularExpression Id. */
  int CLOSE_CURLY_BRACE = 31;
  /** RegularExpression Id. */
  int MULTILINGUAL_VENDOR_START = 32;
  /** RegularExpression Id. */
  int UNIQUE_VENDOR_START = 33;
  /** RegularExpression Id. */
  int OPEN_SQUARE_BRACKET = 34;
  /** RegularExpression Id. */
  int CLOSE_SQUARE_BRACKET = 35;
  /** RegularExpression Id. */
  int TIDLE = 36;
  /** RegularExpression Id. */
  int OPTIONSLIST_START = 37;
  /** RegularExpression Id. */
  int PLUS = 38;
  /** RegularExpression Id. */
  int RAW = 39;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<ASTERISK>",
    "<OPEN_CURLY_BRACE>",
    "<AMPERSAND>",
    "<NOT>",
    "<OPEN_PARENTHESIS>",
    "<CLOSE_PARENTHESIS>",
    "<AND>",
    "<OR>",
    "<WORD>",
    "<INT>",
    "<EQUAL>",
    "<LESS_GREATER>",
    "<LESS>",
    "<GREATER>",
    "<LESS_EQUAL>",
    "<GREATER_EQUAL>",
    "<COND_EXISTS>",
    "<STRING>",
    "<COND_APPROP>",
    "<COMMA>",
    "<COND_PACKAGE>",
    "<IF>",
    "<ELSEIF>",
    "<ELSE>",
    "<ENDIF>",
    "<MINUS>",
    "<PACKAGE_OPTION>",
    "<COMMENT_START>",
    "<LANGUAGE_START>",
    "<PACKAGE_HEADER_START>",
    "<CLOSE_CURLY_BRACE>",
    "<MULTILINGUAL_VENDOR_START>",
    "<UNIQUE_VENDOR_START>",
    "<OPEN_SQUARE_BRACKET>",
    "<CLOSE_SQUARE_BRACKET>",
    "<TIDLE>",
    "<OPTIONSLIST_START>",
    "<PLUS>",
    "<RAW>",
  };

}
