/*
============================================================================
 Name		: $(baseName).rss
 Author	  : $(author)
 Version	 :
 Copyright   : $(copyright)
 Description : This file contains all the resources for the $(baseName).
============================================================================
*/

#include <eikon.rh>
#include <eikon.rsg>
#include <qikon.rh>
#include <qikon.hrh>
#include <uikon.rh>
#include <uikon.hrh>

#include <QikCommand.rh>

#include "$(baseName).hrh" // Application specific commands
// Strings that should be localised should not be defined in the resource file itself, 
// but in separate files with the extension .rls. 
#include "$(baseName).rls" // Defines localisable strings


// Use this statement to ensure that the resources in the file have a unique ID
// so that an application can use multiple resource files without resource ID
// conflict. This statement must be the first non-comment statement in the file.
NAME $(rezId)

// The three following resources are mandatory fields and need to be the 
// first resource fields in the resource file. Need to be defined in this order.
// These resources don't need to contain any useful info, just need to be there.

// RSS_SIGNATURE can be used to specify version information
RESOURCE RSS_SIGNATURE { }

// Defines the name of the default file the application framework creates.
// This resource must always be the second resource in the resource file.
RESOURCE TBUF { buf = "$(baseName)"; }

// This resource is NOT used by UIQ.
// Otherwise this resources is used to define an application's GUI.
RESOURCE EIK_APP_INFO {	}

//----------------------------------------------------
//------------------ TEXT CONSTANTS ------------------
//----------------------------------------------------
// These resources hold strings that are used in the C++ source code, 
// these strings are used as infoprint text. 
// The actual string is defined in the .rls file.
RESOURCE TBUF r_infoprint1_text { buf = STRING_r_$(baseName)_infoprint1_text; }
RESOURCE TBUF r_infoprint2_text { buf = STRING_r_$(baseName)_infoprint2_text; }
RESOURCE TBUF r_infoprint3_text { buf = STRING_r_$(baseName)_infoprint3_text; }

//----------------------------------------------------
//-------------- CONFIGURATION FOR VIEW --------------
//----------------------------------------------------
// A view shall use the QIK_VIEW_CONFIGURATIONS resource struct to define which 
// UI configurations it supports. Can also use QIK_VIEW_CONFIGURATIONS to setup 
// the view to switch layout and command list automatically when changes of UI 
// configuration occur. This is done with the view and command_list members of 
// the QIK_VIEW_CONFIGURATIONS.

// The application supports the reference UI Configurations that are supported
// in the UIQ 3 SDK. Use the UiqEnv tool, to change the UI Configuration in the
// emulator in order to develop and test the application with varying phone styles.
RESOURCE QIK_VIEW_CONFIGURATIONS r_ui_configurations
	{
	configurations = 
		{
		QIK_VIEW_CONFIGURATION
			{
			ui_config_mode = KQikPenStyleTouchPortrait;
			command_list = r_$(baseName)_commands;
			view = r_$(baseName)_layout;
			},
		QIK_VIEW_CONFIGURATION
			{
			ui_config_mode = KQikPenStyleTouchLandscape;
			command_list = r_$(baseName)_commands;
			view = r_$(baseName)_layout;
			},
		QIK_VIEW_CONFIGURATION
			{
			ui_config_mode = KQikSoftkeyStyleTouchPortrait;
			command_list = r_$(baseName)_commands;
			view = r_$(baseName)_layout;
			},
		QIK_VIEW_CONFIGURATION
			{
			ui_config_mode = KQikSoftkeyStylePortrait;
			command_list = r_$(baseName)_commands;
			view = r_$(baseName)_layout;
			},
		QIK_VIEW_CONFIGURATION
			{
			ui_config_mode = KQikSoftkeyStyleSmallPortrait;
			command_list = r_$(baseName)_commands;
			view = r_$(baseName)_layout;
			}
		};
	}

//----------------------------------------------------
//------------------ VIEW COMMANDS -------------------
//----------------------------------------------------
// Commands are defined with the QIK_COMMAND_LIST struct, 
// commands can also be created in code by instantiating CQikCommand.
// The control command id for debug command is a reserved id from uikon.hrh.
// The id for each infoprint command is defined in the $(baseName).hrh file.
// The string for each command is defined in the $(baseName).rls file, 
// due to localisation.
RESOURCE QIK_COMMAND_LIST r_$(baseName)_commands
	{
	items =
		{
		/**
		This command shall only be visible in debug mode because it is only 
		used to find memory leaks during development of the application.
		*/
		QIK_COMMAND
			{
			id = EEikCmdExit;
			type = EQikCommandTypeScreen;
			// Indicate that this command will only be visible in debug
			stateFlags = EQikCmdFlagDebugOnly;
			text = STRING_r_$(baseName)_close_debug_cmd;
			},
		QIK_COMMAND
			{
			id = E$(baseName)InfoPrint1Cmd;
			type = EQikCommandTypeScreen;
			text = STRING_r_$(baseName)_infoprint1_cmd;
			},
		QIK_COMMAND
			{
			id = E$(baseName)InfoPrint2Cmd;
			type = EQikCommandTypeScreen;
			text = STRING_r_$(baseName)_infoprint2_cmd;
			},
		QIK_COMMAND
			{
			id = E$(baseName)InfoPrint3Cmd;
			type = EQikCommandTypeScreen;
			text = STRING_r_$(baseName)_infoprint3_cmd;
			}
		};
	}
//----------------------------------------------------
//------------------- VIEW LAYOUT --------------------
//----------------------------------------------------
// Defines the view by linking to the pages.
RESOURCE QIK_VIEW r_$(baseName)_layout
	{
	pages = r_$(baseName)_layout_pages;
	}

// Defines the pages of a view. 
// In this application there only exist one page for the label to be displayed in.
RESOURCE QIK_VIEW_PAGES r_$(baseName)_layout_pages
	{
	pages = 
		{
		QIK_VIEW_PAGE
			{
			page_id = E$(baseName)ViewPage;
			page_content = r_$(baseName)_page_control;
			}
		};
	}

//----------------------------------------------------
//------------------ VIEW CONTROLS -------------------
//----------------------------------------------------
// Defines the content of the page.
// The page consist of one label that is displayed in the middle of the view.
RESOURCE QIK_CONTAINER_SETTINGS r_$(baseName)_page_control
	{
	layout_manager_type = EQikGridLayoutManager;
	layout_manager = r_grid_layout_manager;
	controls =
		{
		QIK_CONTAINER_ITEM_CI_LI
			{
			unique_handle = E$(baseName)LabelCtrl;
			type = EEikCtLabel;
			control = r_$(baseName)_label;
			}
		};
	}
	
//----------------------------------------------------
//---------------------- LABEL -----------------------
//----------------------------------------------------
// Defines the label and specifies the labels font and text.
RESOURCE LABEL r_$(baseName)_label
	{
	standard_font = EEikLabelFontLegend;
	txt = STRING_r_$(baseName)_text;
	}

//----------------------------------------------------
//-------------- GRID LAYOUT MANAGER -----------------
//----------------------------------------------------
// Defines the grid layout manager that places the label control in the middle 
// of the view.
RESOURCE QIK_GRID_LAYOUT_MANAGER r_grid_layout_manager
	{
	default_layout_data = QIK_GRID_LAYOUT_DATA 
		{
		horizontal_alignment = EQikLayoutHAlignCenter;
		vertical_alignment = EQikLayoutVAlignCenter;	
		};
	}
