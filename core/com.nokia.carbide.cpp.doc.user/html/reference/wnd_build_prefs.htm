<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta name="LASTUPDATED" content="06/17/05 11:09:43" />
<title>Build preferences</title>
<link rel="StyleSheet" href="../../book.css" type="text/css"/>
<script language="JavaScript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js"></script>
<style type="text/css">
<!--
.style1 {	font-family: Georgia, "Times New Roman", Times, serif;
	font-weight: bold;
}
-->
</style>
</head>
<body bgcolor="#FFFFFF">
<h2>Build preferences</h2>
<p>The Carbide.c++ &gt; <img src="../images/command_link.png" border="0" alt="" /> <a class="command-link" href='javascript:executeCommand("org.eclipse.ui.window.preferences(preferencePageId=com.nokia.carbide.cdt.internal.builder.ui.BuilderPreferencePage)")'> Build
</a> page in the <b>Preferences</b> window provides global preferences to control general build options like clean, test components, dependency tracking, concurrent build jobs, build behavior, and emulator options.</p>
<p align="center"><img src="images/prefs_build_workspace.png" width="620" height="458" alt="" /></p>
<p class="figure">Figure 1 - Build workspace preferences page </p>
<p>The following options are available in both the global Build preference panel and the project <b>Properties &gt; Carbide.c++ &gt; </b><b><a href="build_properties/pane_project_settings.htm">Carbide Project Settings</a></b> panel. </p>
<h5>Table 1 Build Preferences &mdash;items</h5>
<table width="100%"  border="0" cellpadding="2" cellspacing="0">
  <tr>
    <th width="29%" scope="col">Item</th>
    <th width="57%" scope="col">Explanation</th>
  </tr>
  <tr>
    <td><b>Use built-in Nokia x86 environment variables for WINSCW builds </b></td>
    <td><p>If enabled, Carbide adds the built-in x86 compiler environment variables to the build environment.</p>
      <p>If the option is not
        checked, the build process will build with whatever tools are defined in your environment.</p>
    <p>A directory named x86Build at the root of the product installation contains the build tools, libraries, and <span class="code"><a href="../tasks/projects/prj_build_cmd_line.htm">env_update.exe</a></span>.</p></td>
  </tr>
  <tr>
    <td><b>Build test components when building from bld.inf </b></td>
    <td><p>Enable to build all the projects defined by .MMP files listed under the <span class="code">PRJ_TESTMMPFILES</span> section of the component description file. </p>
    <p>If not enabled, only those projects defined by .MMP files listed under the <span class="code">PRJ_MMPFILES</span> section of the component description file are built. </p>    </td>
  </tr>
  <tr>
    <td><b>Run builds concurrently (improves compile time) </b></td>
    <td><p>Enable to tell Carbide to generate concurrent builds up to the amount specified in the Build jobs field. This option can significantly reduce build times as it takes advantage of multi-core processors and hyperthreading to run multiple threads at once. </p>
    <p>If not enabled, only a single build is run. Note that this may be required if your project contains circular dependencies or other issues that prevent concurrent builds from executing correctly. </p></td>
  </tr>
  <tr>
    <td><b>Use default incremental builder </b></td>
    <td>Enable to have Carbide determine if a  build is required by checking the state of  any file in the workspace. </td>
  </tr>
</table>
<p>&nbsp;</p>
<p align="center"><img src="images/carbide_proj_settings_sbsv1.png" alt="sbsv1 tab" width="417" height="243"></p>
<p align="center" class="figure">Figure 2 - SBSv1 Tab</p>
<h5 align="left">Table 2 Symbian Build System v1 tab </h5>
<table width="100%"  border="0" cellpadding="2" cellspacing="0">
  <tr>
    <th width="29%" scope="col">Item</th>
    <th width="57%" scope="col">Explanation</th>
  </tr>
  <tr>
    <td><span class="style1">Clean level </span></td>
    <td><p>Specifies the level of clean to perform on  project files. The levels include:</p>
      <ul>
        <li>Level 0  (<span class="code">abld clean</span>) - removes all the intermediate files created during compilation, and all the executables and import libraries created by the linker</li>
        <li>Level 1  (<span class="code">abld reallyclean</span>) - performs a <span class="code">clean</span> operation, but also removes all exported files and makefiles</li>
        <li>Level 2  (<span class="code">abld reallyclean</span>, <span class="code">bldmake clean</span>) - performs  a <span class="code">reallyclean</span> operation and then removes all files created by bldmake</li>
      </ul>
    </td>
  </tr>
  <tr>
    <td><span class="style1">Manage dependency tracking (improves build speed) </span></td>
    <td><p>Enable to have Carbide manage the dependency tracking for source and resource files. Carbide does this by separating out the generation of dependency information from the makefile and managing the entire process.  All builds now can quickly compare whether new dependency information is required due to changes in a source file and only build those that need updating. </p>
    <p>If not enabled, the Symbian OS command line build system handles all dependency tracking by generating the dependency information in the makefiles. Because it does this for all project files, regardless of the number of changes, it can result in a performance penalty. A single edit in a MMP file  forces a complete regeneration of the makefile dependency information for all project files. </p>
    </td>
  </tr>
  <tr>
    <td><b>Show a dialog to modify build actions when modified MMPs are detected </b></td>
    <td><p>Enable to have Carbide ask before starting a build what action to take when modified files are detected. When disabled, do not show a dialog but use the default action listed below.</p>
    </td>
  </tr>
  <tr>
    <td><b>Default action to take when mmp files are modified </b></td>
    <td><p>Defines the default action Carbide should execute when it detects modified MMP files and the option above is disabled: </p>
      <ul>
        <li>None</li>
        <li>Link Only</li>
        <li>Compile and Link</li>
      </ul>
    </td>
  </tr>
  <tr>
    <td><strong>Do not offer to track dependencies for projects build on command-line </strong></td>
    <td>If you build a project from the command-line (with 'abld build') and then import the project into Carbide and attempt to build, Carbide will ask if you would like Carbide to manage source dependencies for you. Enabling this option insures Carbide will not ask you to manage dependencies (they will be done as normally done via 'abld build' command).</td>
  </tr>
</table>
<p align="left">&nbsp;</p>
<p align="center"><img src="images/carbide_proj_settings_sbsv2.png" alt="sbsv2 tab" width="420" height="283"></p>
<p align="center" class="figure">Figure 3 - SBSv2 Tab </p>
<h5 align="left">Table 3 Symbian Build System v2 tab </h5>
<table width="100%"  border="0" cellpadding="2" cellspacing="0">
  <tr>
    <th width="29%" scope="col">Item</th>
    <th width="57%" scope="col">Explanation</th>
  </tr>
  <tr>
    <td><span class="style1">Clean level </span></td>
    <td>Select the level of clean when cleaning a project.
      <p><strong>abld clean</strong> erases all files created by a corresponding abld target   command (all intermediate files created during compilation and all executables and import libraries created by the linker) </p>
      <p><strong>abld reallyclean</strong> does what abld clean does, and also removes files   exported by abld export and makefiles generated by abld makefile, or the abld   test equivalents</p></td>
  </tr>
  <tr>
    <td><b>Keep going </b></td>
    <td><p>This build option tells a particular command to   keep going even if unrelated build steps report errors or files are missing.</p></td>
  </tr>
  <tr>
    <td><b>Debug mode </b></td>
    <td><p>This option generates symbolic debug information for release or debug builds,   independent of the compiler optimization level.</p>
        <p>By default, the build system generates symbolic debug information only for   the debug builds. With this option, the generation of symbolic debug information   is extended to release builds to support debugging of release binaries on ARM   ABI compliant platforms.</p></td>
  </tr>
  <tr>
    <td><span class="style1">Override default make engine</span> </td>
    <td>Check this box to enable  an edit box to specify the make engine to use, for example, eMake  from Electric Cloud.</td>
  </tr>
</table>
<p>&nbsp;</p>
<h5>Related references</h5>
<ul>
  <li><a href="build_properties/pane_project_settings.htm">Carbide Project Settings </a></li>
</ul>
<div id="footer">Copyright &copy; 2009 Nokia Corporation and/or its subsidiary(-ies). All rights reserved. <br>License: <a href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</a></div>

</body>
</html>
