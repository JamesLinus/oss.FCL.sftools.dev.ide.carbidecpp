<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta name="LASTUPDATED" content="06/17/05 11:09:43" />
<title>References</title>
<link rel="StyleSheet" href="../../book.css" type="text/css"/>
</head>
<body bgcolor="#FFFFFF">
<h2>How it Works </h2>
<p>LeaveScan works by examining each line of source code and checking that functions which do not terminate in L cannot leave. However, there are a few functions (more accurately, operators) in Symbian OS that may leave but cannot have an L suffix (such as <strong>operator&lt;&lt;</strong> and <strong>operator&gt;&gt;</strong> for <strong>RWriteStream</strong> and <strong>RReadStream</strong> respectively).</p>
<p>The naming convention cannot be applied appropriately to operators and, unfortunately, LeaveScan does not have the logic needed to recognize operators that may leave. When you use operators that you know have the potential to leave, you&rsquo;ll have to remember to check this code by sight yourself.</p>
<p>LeaveScan also checks functions which do have a trailing L to see if they really can leave. If functions are encountered which do not leave, LeaveScan raises a warning. However, this scenario can be perfectly valid, for example, when implementing an abstract function such as CActive::RunL(), some implementations may leave but others may not.</p>
<p>LeaveScan ignores calls in trapped functions, commented out code, i.e. // and /* and */. It also checks for calls to LD, LC and LX functions as well as normal L functions. It also checks for User::Leave(), ELeave, User::LeaveIfError().</p>
<p>&nbsp;</p>
<div class="step">
  <p><img src="../images/nokia_copyright.png" alt="copyright" width="280" height="21"></img></p>
</div>
</body>
</html>
