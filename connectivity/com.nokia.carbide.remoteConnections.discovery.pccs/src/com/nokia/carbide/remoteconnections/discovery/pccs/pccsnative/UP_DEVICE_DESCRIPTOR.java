/*
* Copyright (c) 2010 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of the License "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description: 
*
*/
package com.nokia.carbide.remoteconnections.discovery.pccs.pccsnative;

import com.sun.jna.Structure;
import com.sun.jna.ptr.ShortByReference;

/**
 *  This file was originally autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 *  but modified to work with Carbide.
 */
public class UP_DEVICE_DESCRIPTOR extends Structure {
	/// Size of the structure
	public int dwSize;
	/// DEVICE Descriptor Type
	public byte bDescriptorType;
	/**
	 * Device ID name<br>
	 * C type : WCHAR*
	 */
	public ShortByReference pstrDeviceID;
	/**
	 * Serial number of the device. Not set to all devices. Can be NULL.<br>
	 * C type : WCHAR*
	 */
	public ShortByReference pstrSerialNumber;
	/// USB Specification Release Number in Binary-Coded Decimal
	public int dwUSB;
	/// Class code (assigned by the USB-IF)
	public byte bDeviceClass;
	/// Subclass code (assigned by the USB-IF)
	public byte bDeviceSubClass;
	/// Protocol code (assigned by the USB-IF)
	public byte bDeviceProtocol;
	/// Maximum packet size for endpoint zero (only 8, 16, 32, or 64 are valid)
	public byte bMaxPacketSize;
	/// Vendor ID (assigned by the USB-IF)
	public int dwVendor;
	/// Product ID (assigned by the manufacturer)
	public int dwProduct;
	/// Device release number in binary-coded decimal
	public int dwDevice;
	/// Index of string descriptor describing manufacturer
	public byte bManufacturer;
	/// Index of string descriptor describing product
	public byte bProduct;
	/// Index of string descriptor describing the device\u2019s serial number
	public byte bSerialNumber;
	/// Number of possible configurations
	public byte bNumOfConfigurations;
	public UP_DEVICE_DESCRIPTOR() {
		super();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected UP_DEVICE_DESCRIPTOR newInstance() { return new UP_DEVICE_DESCRIPTOR(); }
	public static UP_DEVICE_DESCRIPTOR[] newArray(int arrayLength) {
		return null;
//		return com.ochafik.lang.jnaerator.runtime.Structure.newArray(UP_DEVICE_DESCRIPTOR.class, arrayLength);
	}
	public static class ByReference extends UP_DEVICE_DESCRIPTOR implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends UP_DEVICE_DESCRIPTOR implements com.sun.jna.Structure.ByValue {}

}
