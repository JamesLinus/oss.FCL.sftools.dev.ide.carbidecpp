/*
* Copyright (c) 2010 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of the License "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description: 
*
*/
package com.nokia.carbide.remoteconnections.discovery.pccs.pccsnative;

import com.sun.jna.Structure;

/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * but modified for use by Carbide.
 */
public class UP_CONFIGURATION_DESCRIPTOR extends Structure {
	/// Size of the structure
	public int dwSize;
	/// CONFIGURATION Descriptor Type
	public byte bDescriptorType;
	/// Total length of data returned for this configuration
	public int dwTotalLength;
	/// Number of interfaces supported by this configuration
	public byte bNumOfInterfaces;
	/// Value to use as an argument to the SetConfiguration() request to select this configuration
	public byte bConfigurationValue;
	/// Index of string descriptor describing this configuration
	public byte bConfiguration;
	/// Configuration characteristics
	public byte bAttributes;
	/// Maximum power consumption of the USB device from the bus
	public byte bMaxPower;
	public UP_CONFIGURATION_DESCRIPTOR() {
		super();
	}
	/**
	 * @param dwSize Size of the structure<br>
	 * @param bDescriptorType CONFIGURATION Descriptor Type<br>
	 * @param dwTotalLength Total length of data returned for this configuration<br>
	 * @param bNumOfInterfaces Number of interfaces supported by this configuration<br>
	 * @param bConfigurationValue Value to use as an argument to the SetConfiguration() request to select this configuration<br>
	 * @param bConfiguration Index of string descriptor describing this configuration<br>
	 * @param bAttributes Configuration characteristics<br>
	 * @param bMaxPower Maximum power consumption of the USB device from the bus
	 */
	public UP_CONFIGURATION_DESCRIPTOR(int dwSize, byte bDescriptorType, int dwTotalLength, byte bNumOfInterfaces, byte bConfigurationValue, byte bConfiguration, byte bAttributes, byte bMaxPower) {
		super();
		this.dwSize = dwSize;
		this.bDescriptorType = bDescriptorType;
		this.dwTotalLength = dwTotalLength;
		this.bNumOfInterfaces = bNumOfInterfaces;
		this.bConfigurationValue = bConfigurationValue;
		this.bConfiguration = bConfiguration;
		this.bAttributes = bAttributes;
		this.bMaxPower = bMaxPower;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected UP_CONFIGURATION_DESCRIPTOR newInstance() { return new UP_CONFIGURATION_DESCRIPTOR(); }
	public static UP_CONFIGURATION_DESCRIPTOR[] newArray(int arrayLength) {
		return null;
//		return com.ochafik.lang.jnaerator.runtime.Structure.newArray(UP_CONFIGURATION_DESCRIPTOR.class, arrayLength);
	}
	public static class ByReference extends UP_CONFIGURATION_DESCRIPTOR implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends UP_CONFIGURATION_DESCRIPTOR implements com.sun.jna.Structure.ByValue {}

}
