EnumPropertyMapper.UnknownEnum=property ''{0}'' has unknown enumeration value ''{1}'' when mapping to member ''{2}'' in component {3}
EnumPropertyMapper.UnknownEnumInArray=property has unknown enumeration value ''{0}'' when mapping to array element in component {1}
EnumPropertyMapper.PossiblyInvalidEnum=property ''{0}'' maps to possibly incorrect enumeration value ''{1}'' when mapping to member ''{2}'' in component {3} (is a required header file missing?)
EnumPropertyMapper.PossiblyInvalidEnumInArray=property maps to possibly incorrect enumeration value ''{0}'' when mapping array element in component {1}  (is a required header file missing?)
EnumPropertyMapper.NameAlgorithmRequired=in <mapEnum...> for property ''{0}'', the uniqueValue=''{1}'' must be paired with nameAlgorithm="..." in component {2} 
InstanceSourceMapper.MissingStructDecl=cannot find the declaration for STRUCT {0} in {1} for {2}
InstanceSourceMapper.NonNumericIndexInMember=member specifier ''{0}'' contains a non-numeric index ''{1}'' (in component {2})
InstanceSourceMapper.CannotMapProperty=cannot map property ''{0}'' of component ''{1}'' to member ''{2}'' of struct ''{3}'' (check that the mapping element type is correct)
InstanceSourceMapper.IllegalMemberArrayIndex=resource member specifier ''{0}'' must specify terminal element ({1}) when mapping property ''{2}'' in component {3} to member ''{4}'' of struct ''{5}''
InstanceSourceMapper.CannotCreateUniqueResource=cannot create a unique resource definition with base name ''{0}'' for {1} in component {2}
InstanceSourceMapper.InvalidPropertyValue=property ''{0}'' has an invalid value in {1} (component {2})
InstanceSourceMapper.MissingProperty=property ''{0}'' does not exist in or below component {1}
InstanceSourceMapper.IllegalPropertyPath=property ''{0}'' is not a property source in path ''{1}'' (component {2})
InstanceSourceMapper.IllegalStructMember=member ''{0}'' does not exist in struct ''{1}'' (in component {2})
InstanceSourceMapper.CannotFindHeader=cannot find header {0} referenced from {1}\nsearch paths:\n{2}
InstanceSourceMapper.UnresolvedReference=component ''{0}'' refers to unknown object ''{1}''
InstanceSourceMapper.MissingComponentForReference=component ''{0}'' refers to object ''{1}'' with missing component {2}
InstanceSourceMapper.NoResourceForReference=component ''{0}'' refers to object ''{1}'' (component {2}) which has no RSS source mapping
InstanceSourceMapper.AmbiguousResourceForReference=component ''{0}'' refers to object ''{1}'' (component {2}) which has more than one mapped resource
InstanceSourceMapper.AmbiguousResourceWithIdForReference=component ''{0}'' refers to resource id ''{1}'' of object ''{2}'' (component {3}) which has more than one mapped resource with that id
InstanceSourceMapper.InvalidPropertyPath=property path ''{0}'' is invalid in component ''{1}''; it should be a list of identifiers separated by '.' or '->'
ArrayPropertyMapper.CannotMapElementsToArray=cannot map elements of property ''{0}'' of component {1} to array member ''{2}'' (check that the mapping element type is correct)
InstanceSourceMapper.NoChoiceMatched=no <choice> matched <select {4}="{0}"> for value ''{1}'' of object ''{2}'' in component {3} 
InstanceSourceMapper.IllegalNesting=invalid nesting of <map...Member> (''{0}'') outside of <mapResource> in component {1}
InstanceSourceMapper.ArrayElement=array element
ArrayFromContainerPropertyMapper.CannotMapElementsToArray=cannot map child elements of instance ''{0}'' of component {1} to array member ''{2}'' (check that the mapping element type is correct)
ArrayFromContainerPropertyMapper.NoSubElementExpected=no subelement expected in <mapArray...> when mapping array of children in property ''{0}'' of component ''{1}'' to array member ''{1}''
ArrayFromContainerPropertyMapper.ResourceOrNoSubElementExpected=either <mapResourceElement> or no subelement expected in <mapArray...> when mapping array of children in property ''{0}'' of component ''{1}'' to array member ''{1}''
ArrayFromContainerPropertyMapper.AmbiguousResourceForReference=expected exactly one mapped resource (got {5}) when mapping child ''{0}'' (component ''{1}'') of parent ''{2}'' (component ''{3}'') to array member ''{4}'' 
ArrayFromSequencePropertyMapper.SubElementRequired=a <map...Element> subelement is required in <mapArray...> when mapping array of children in property ''{0}'' of component ''{1}'' to array member ''{2}''
ArrayFromSequencePropertyMapper.ArrayOfExpressions=array of expressions
NameAlgorithm.NoNamingAttribute=no ''{0}'' attribute found in component {1}; cannot generate enum for nameAlgorithm="{2}" 
InstancePropertyMapper.AmbiguousResourceForReference=expected exactly one mapped resource (got {5}) for rsrcId ''{4}'' when mapping ''{0}'' (component ''{1}'') of parent ''{2}'' (component ''{3}'')
InstanceSourceMapper.InvalidSelectUsage=neither property="...", attribute="...", propertyExists="...", nor isComponentInstanceOf="..." was used when mapping <select> for instance ''{0}'' of component ''{1}''
InstancePropertyMapper.NullResourceId=<null>
BitmaskPropertyMapper.NonBooleanProperty=cannot map non-boolean property ''{0}'' in <mapBitmaskValue> (in component {1})
BitmaskPropertyMapper.IncompleteMapping=the <mapBitmask...> element with properties="{0}"\ndoes not have a <mapBitmaskValue> element for every singleton property;\nonly ''{1}'' covered (component {2})
SimplePropertyMapper.BadIntValue=possible source mapping error: mapping non-integer value ''{0}'' from property ''{1}'' into member ''{2}'' in component ''{3}''
SimplePropertyMapper.BadFloatValue=possible source mapping error: mapping non-float value ''{0}'' into property ''{1}'' of struct ''{2}'' 
SimplePropertyMapper.ArrayElement=<array element>
EnumManager.UnknownAlgorithm=unknown name algorithm ''{0}'' referenced from component {1}
EnumManager.CannotUniquifyEnum=cannot synthesize a unique enumerator based on ''{0}'' in file {1}
 
ArrayFromContainerPropertyMapper.NoInstanceIdentifyingMemberSet=no ''{3}'' member is set in an element of the ''{2}'' array generated by property ''{0}'' of component {1}; elements cannot be distinguished from each other: rewriting array
# {1} and {2} are file:line 
InstanceSourceMapper.UnexpectedSyntax=unexpected syntax in RSS: expected {0} at {1}:{2} (for object ''{3}'', component {4})

SourceMappingAdapterXML.TwoMapResourcesWithSameRsrcId=invalid source mapping: found two mapResourceXXX elements with the same explicit or derived id (''{0}'') in component ''{1}''
ArrayOfComplexResourcesElementMapper.NoUniqueMemberInitializer=when mapping ''{0}'', did not find unique initializer for member ''{1}'' of struct ''{2}'' (component ''{3}'')
  
ArrayOfComplexResourcesElementMapper.ResourceExpression=resource expression
ResourcePropertyMapper.ResourceExpression=resource expression or 0

InstanceSourceMapper.InvalidIndexSelectorUse=invalid use of '#index' outside <mapArray...> in ''{0}'' (component {1})
InstanceSourceMapper.InvalidTypeMappingType=cannot map type from property path ''{0}'' since it is not a compound or enum type
InstanceSourceMapper.MissingTypeMapping=cannot map type from property path ''{0}'' since ''{1}'' has no <sourceTypeMapping>
InstanceSourceMapper.MissingTypeMappingTypeId=cannot map type from property path ''{0}'' since ''{1}'' has no <sourceTypeMapping> for the id ''{2}''
InstanceSourceMapper.AmbiguousTypeMapping=invalid use of <select> in <sourceTypeMapping>: choices cannot contain more than one <mapXXXType> in component ''{0}''


